{"ast":null,"code":"var _jsxFileName = \"/Users/stevenvisser/code/stevenvssr/Projects/coding-challange/src/components/HLSSource.js\";\nimport React, { Component } from 'react';\n/*\n    This file is based on an example from the video-react docs. See\n    how just below this comment we destructure a variable called Hls\n    off of window? That's a class provided by the hls.js library that\n    lets us use HLS technology to load and play our videos.\n\n    Long story short, HLS is a protocol that lets us divide and\n    conquer video files or streams so that we can play them in the\n    most efficient manner. You can read more about it here:\n    https://en.wikipedia.org/wiki/HTTP_Live_Streaming\n*/\n\nconst {\n  Hls\n} = window;\nexport default class HLSSource extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.hls = new Hls();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      src,\n      video\n    } = this.props;\n\n    if (src !== prevProps.src) {\n      if (Hls.isSupported()) {\n        this.hls.loadSource(src);\n        this.hls.attachMedia(video);\n        this.hls.on(Hls.Events.MANIFEST_PARSED, () => {});\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hls) {\n      this.hls.destroy();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"source\", {\n      src: this.props.src,\n      type: this.props.type || 'application/x-mpegURL',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/stevenvisser/code/stevenvssr/Projects/coding-challange/src/components/HLSSource.js"],"names":["React","Component","Hls","window","HLSSource","constructor","props","context","hls","componentDidUpdate","prevProps","src","video","isSupported","loadSource","attachMedia","on","Events","MANIFEST_PARSED","componentWillUnmount","destroy","render","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUC,MAAhB;AAEA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC7CI,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACxB,UAAMD,KAAN,EAAaC,OAAb;AACA,SAAKC,GAAL,GAAW,IAAIN,GAAJ,EAAX;AACH;;AAEDO,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAiB,KAAKN,KAA5B;;AACA,QAAIK,GAAG,KAAKD,SAAS,CAACC,GAAtB,EAA2B;AACvB,UAAIT,GAAG,CAACW,WAAJ,EAAJ,EAAuB;AACnB,aAAKL,GAAL,CAASM,UAAT,CAAoBH,GAApB;AACA,aAAKH,GAAL,CAASO,WAAT,CAAqBH,KAArB;AACA,aAAKJ,GAAL,CAASQ,EAAT,CAAYd,GAAG,CAACe,MAAJ,CAAWC,eAAvB,EAAwC,MAAM,CAC7C,CADD;AAEH;AACJ;AACJ;;AAEDC,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKX,GAAT,EAAc;AACV,WAAKA,GAAL,CAASY,OAAT;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AACI,MAAA,GAAG,EAAE,KAAKf,KAAL,CAAWK,GADpB;AAEI,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWgB,IAAX,IAAmB,uBAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AA/B4C","sourcesContent":["import React, { Component } from 'react';\n\n/*\n    This file is based on an example from the video-react docs. See\n    how just below this comment we destructure a variable called Hls\n    off of window? That's a class provided by the hls.js library that\n    lets us use HLS technology to load and play our videos.\n\n    Long story short, HLS is a protocol that lets us divide and\n    conquer video files or streams so that we can play them in the\n    most efficient manner. You can read more about it here:\n    https://en.wikipedia.org/wiki/HTTP_Live_Streaming\n*/\n\nconst { Hls } = window;\n\nexport default class HLSSource extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.hls = new Hls();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { src, video } = this.props;\n        if (src !== prevProps.src) {\n            if (Hls.isSupported()) {\n                this.hls.loadSource(src);\n                this.hls.attachMedia(video);\n                this.hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                });\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.hls) {\n            this.hls.destroy();\n        }\n    }\n\n    render() {\n        return (\n            <source\n                src={this.props.src}\n                type={this.props.type || 'application/x-mpegURL'}\n            />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}